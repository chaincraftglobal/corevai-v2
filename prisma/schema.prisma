// prisma/schema.prisma

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL") // pooled
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // direct
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ─────────────────────────────────────────────────────────────
 * NextAuth standard models + User additions for Credentials
 * ─────────────────────────────────────────────────────────────
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // For Credentials login
  passwordHash String? // bcrypt hash (nullable so OAuth-only users work)

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Quotas / plan
  plan        String @default("free") // "free" | "pro" | etc.
  usedPrompts Int    @default(0) // increment per user prompt

  // V2 relations
  projects   Project[]
  TwoFactor  TwoFactor?
  BackupCode BackupCode[]

  // Owns many conversations (rename to conventional plural)
  conversations Conversation[]
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ───────────────── Projects ─────────────────
 */

model Project {
  id            String         @id @default(cuid())
  name          String
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([ownerId])
}

/**
 * ─────────────── Conversations & Messages ───────────────
 */

model Conversation {
  id    String  @id @default(cuid())
  title String?

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  // Optional so guest conversations are possible
  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  pinned    Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  messages Message[]

  @@index([ownerId, updatedAt])
  @@index([projectId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String // "user" | "assistant"
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

/**
 * ──────────────────── TOTP 2FA ────────────────────
 */

model TwoFactor {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String // base32 secret
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  codes BackupCode[]
}

model BackupCode {
  id        String    @id @default(cuid())
  userId    String
  codeHash  String // bcrypt hash of plaintext backup code
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Optional: attribute codes to a specific TwoFactor config
  twoFactorId String?
  TwoFactor   TwoFactor? @relation(fields: [twoFactorId], references: [id], onDelete: SetNull)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
